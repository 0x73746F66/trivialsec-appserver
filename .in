#!/usr/bin/env bash
PRIMARY='\033[1;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color
echo -e "${PRIMARY}
 _____      _       _       _ __             
/__   \_ __(_)_   _(_) __ _| / _\ ___  ___   
  / /\/ '__| \ \ / / |/ _\` | \ \ / _ \/ __| 
 / /  | |  | |\ V /| | (_| | |\ \  __/ (__   
 \/   |_|  |_| \_/ |_|\__,_|_\__/\___|\___|  
                                           ${NC}"
if [[ -f .env ]]; then
  source .env
else
  cp .env-example .env
  nano .env
  source .env
fi
readonly default_logging=INFO
readonly default_build_env=development
readonly default_env=Dev
readonly default_name=$(id -nu)-$(cat /etc/hostname)

[ -z "${TRIVIALSEC_PY_LIB_VER}" ] && echo -e "${RED}TRIVIALSEC_PY_LIB_VER not set${NC}"
[ -z "${LINODE_FIREWALL}" ] && echo -e "${RED}LINODE_FIREWALL not set${NC}"
[ -z "${LOG_LEVEL}" ] && echo -e "${RED}LOG_LEVEL not set${NC}"
[ -z "${IMAGE_TAG}" ] && echo -e "${RED}IMAGE_TAG not set${NC}"
[ -z "${BUILD_ENV}" ] && echo -e "${RED}BUILD_ENV not set${NC}"
[ -z "${TF_VAR_allowed_linode_username}" ] && echo -e "${RED}TF_VAR_allowed_linode_username not set${NC}"
[ -z "${TF_VAR_public_key}" ] && echo -e "${RED}TF_VAR_public_key not set${NC}"
[ -z "${TF_VAR_trivialsec_py_lib_ver}" ] && echo -e "${RED}TF_VAR_trivialsec_py_lib_ver not set${NC}"
[ -z "${TF_VAR_gitlab_user}" ] && echo -e "${RED}TF_VAR_gitlab_user not set${NC}"
[ -z "${TF_VAR_gitlab_password}" ] && echo -e "${RED}TF_VAR_gitlab_password not set${NC}"
[ -z "${TF_VAR_stripe_webhook_secret}" ] && echo -e "${RED}TF_VAR_stripe_webhook_secret not set${NC}"
export TF_VAR_trivialsec_py_lib_ver=${TF_VAR_trivialsec_py_lib_ver:-$TRIVIALSEC_PY_LIB_VER}
export TF_VAR_gitlab_user=${TF_VAR_gitlab_user:-$GITLAB_USER}
export TF_VAR_gitlab_password=${TF_VAR_gitlab_password:-$GITLAB_PAT}
export TF_VAR_linode_token=${TF_VAR_linode_token:-$LINODE_CLI_TOKEN}
export TF_VAR_aws_access_key_id=${TF_VAR_aws_access_key_id:-$AWS_ACCESS_KEY_ID}
export TF_VAR_aws_secret_access_key=${TF_VAR_aws_secret_access_key:-$AWS_SECRET_ACCESS_KEY}
export TF_VAR_sendgrid_api_key=${TF_VAR_sendgrid_api_key:-$SENDGRID_API_KEY}
[ -z "${TF_VAR_aws_access_key_id}" ] && echo -e "${RED}AWS_ACCESS_KEY_ID (or TF_VAR_aws_access_key_id) not set${NC}"
[ -z "${TF_VAR_aws_secret_access_key}" ] && echo -e "${RED}AWS_SECRET_ACCESS_KEY (or TF_VAR_aws_secret_access_key) not set${NC}"
[ -z "${TF_VAR_linode_token}" ] && echo -e "${RED}LINODE_CLI_TOKEN (or TF_VAR_linode_token) not set${NC}"
export APP_ENV=${APP_ENV:-${default_env}}
export APP_NAME=${APP_NAME:-${default_name}}
export TF_VAR_app_env=${APP_ENV}
export TF_VAR_app_name=${APP_NAME}
export LOG_LEVEL=${LOG_LEVEL:-${default_logging}}
export BUILD_ENV=${BUILD_ENV:-${default_build_env}}
if [ "$(which deactivate)" != "deactivate not found" ]; then
  deactivate
fi
which python3 >/dev/null 2>&1
[ $? -eq 1 ] && (echo -e "${RED}Please install python version 3.9 ${NC}"; exit 1)
python3 -m venv >/dev/null 2>&1
[ $? -eq 1 ] && (echo -e "${RED}Please install python PEP 405 venv module ${NC}"; exit 1)
if [[ -f .venv/bin/activate ]]; then
  source .venv/bin/activate
else
  python3 -m venv .venv
  source .venv/bin/activate
fi
aws sts get-caller-identity
echo -e "${GREEN}Getting Parameters with prefix /${APP_ENV}/Deploy/${APP_NAME}${NC}"
export TF_VAR_recaptcha_site_key=$(aws ssm get-parameter --name "/${APP_ENV}/Deploy/${APP_NAME}/recaptcha_site_key" --output text --with-decryption --query 'Parameter.Value')
export TF_VAR_recaptcha_secret_key=$(aws ssm get-parameter --name "/${APP_ENV}/Deploy/${APP_NAME}/recaptcha_secret_key" --output text --with-decryption --query 'Parameter.Value')

git fetch
git status
docker-compose ps
echo -e "${PRIMARY}$(make --version)${NC}\n$(make help)"
